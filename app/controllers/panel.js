// Generated by CoffeeScript 1.4.0
(function() {
  var Key, Keys, Panel, Spine,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine = require('../libs/spine');

  Key = require('../models/key');

  Keys = require('./keys');

  Panel = (function(_super) {

    __extends(Panel, _super);

    Panel.prototype.window = gui.Window.get();

    Panel.prototype.events = {
      'mousedown .add-key': 'createKey',
      'click .minimize': 'minimize',
      'click .maximize': 'maximize',
      'click .close': 'close'
    };

    function Panel() {
      this.maximize = __bind(this.maximize, this);

      this.minimize = __bind(this.minimize, this);

      this.inspect = __bind(this.inspect, this);

      this.close = __bind(this.close, this);

      this.createKey = __bind(this.createKey, this);
      Panel.__super__.constructor.apply(this, arguments);
    }

    Panel.prototype.createKey = function() {
      return Key.create({
        title: "Title",
        url: "URL",
        username: "Username",
        password: "Password",
        created_on: Date.now()
      });
    };

    Panel.prototype.close = function() {
      return this.window.reloadDev();
    };

    Panel.prototype.inspect = function() {
      return this.window.showDevTools();
    };

    Panel.prototype.minimize = function() {
      return this.window.minimize();
    };

    Panel.prototype.maximize = function() {
      return this.window.maximize();
    };

    return Panel;

  })(Spine.Controller);

  module.exports = Panel;

}).call(this);
