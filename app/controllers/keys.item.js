// Generated by CoffeeScript 1.4.0
(function() {
  var $, KeyItem, Spine, clipboard,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine = require('../libs/spine');

  $ = Spine.$;

  clipboard = gui.Clipboard.get();

  KeyItem = (function(_super) {

    __extends(KeyItem, _super);

    KeyItem.prototype.tag = 'li';

    KeyItem.prototype.events = {
      'click .main': 'click',
      'dblclick .main': 'dblclick',
      'click .username': 'copyUsername',
      'click .password': 'copyPassword'
    };

    function KeyItem() {
      this.copyPassword = __bind(this.copyPassword, this);

      this.copyUsername = __bind(this.copyUsername, this);

      this.close = __bind(this.close, this);

      this.open = __bind(this.open, this);

      this.deselect = __bind(this.deselect, this);

      this.select = __bind(this.select, this);

      this.render = __bind(this.render, this);

      this.dblclick = __bind(this.dblclick, this);

      this.click = __bind(this.click, this);
      KeyItem.__super__.constructor.apply(this, arguments);
      this.key.bind('select', this.select);
      this.key.bind('deselect', this.deselect);
      this.key.bind('open', this.open);
      this.key.bind('close', this.close);
    }

    KeyItem.prototype.click = function(event) {};

    KeyItem.prototype.dblclick = function(event) {
      return this.key.toggleOpen();
    };

    KeyItem.prototype.render = function() {
      var template;
      template = "<div class=\"main\">\n  <div class=\"button arrow-right\"></div>\n  <img src=\"icons/vimeo.png\" width=\"32\" height=\"32\">\n  <h3>" + this.key.title + "</h3>\n  <p class=\"username\">" + this.key.username + "</p>\n</div>";
      this.el.html($(template));
      return this.el;
    };

    KeyItem.prototype.select = function() {
      return this.el.addClass('active');
    };

    KeyItem.prototype.deselect = function() {
      return this.el.removeClass('active');
    };

    KeyItem.prototype.open = function() {
      var template;
      template = "<div class=\"details\">\n  <div class=\"control\">\n    <label>URL:</label>\n    <div class=\"url\">" + this.key.url + "</div>\n  </div>\n  <div class=\"control\">\n    <label>Username:</label>\n    <div class=\"username copy\">" + this.key.username + "</div>\n  </div>\n  <div class=\"control\">\n    <label>Password:</label>\n    <div class=\"password copy\">••••••••••</div>\n  </div>\n</div>";
      this.el.append(template);
      return this.el.addClass("open");
    };

    KeyItem.prototype.close = function() {
      var _this = this;
      this.el.removeClass('open');
      return setTimeout(function() {
        return _this.el.find('.details').remove();
      }, 200);
    };

    KeyItem.prototype.copyUsername = function() {
      var el;
      clipboard.set(this.key.username, 'text');
      el = this.el.find(".username");
      el.addClass("copied");
      return setTimeout(function() {
        return el.removeClass("copied");
      }, 500);
    };

    KeyItem.prototype.copyPassword = function() {
      var el;
      clipboard.set(this.key.password, 'text');
      el = this.el.find(".password");
      el.addClass("copied");
      return setTimeout(function() {
        return el.removeClass("copied");
      }, 500);
    };

    return KeyItem;

  })(Spine.Controller);

  module.exports = KeyItem;

}).call(this);
