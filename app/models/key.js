// Generated by CoffeeScript 1.4.0
(function() {
  var Spine,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine = require('../libs/spine');

  global.Key = (function(_super) {

    __extends(Key, _super);

    function Key() {
      this.toggleOpen = __bind(this.toggleOpen, this);

      this.select = __bind(this.select, this);
      return Key.__super__.constructor.apply(this, arguments);
    }

    Key.configure('Key', 'title', 'url', 'username', 'password', 'created_on', 'open');

    Key.deselect = function() {
      var key, selected, _i, _len, _results;
      selected = Key.select(function(key) {
        var _ref;
        return (_ref = key.selected) != null ? _ref : false;
      });
      _results = [];
      for (_i = 0, _len = selected.length; _i < _len; _i++) {
        key = selected[_i];
        key.selected = false;
        _results.push(key.trigger('deselect'));
      }
      return _results;
    };

    Key.prototype.select = function() {
      Key.deselect();
      this.selected = true;
      return this.trigger('select');
    };

    Key.close = function() {
      var key, open, _i, _len, _results;
      open = Key.select(function(key) {
        var _ref;
        return (_ref = key.open) != null ? _ref : false;
      });
      _results = [];
      for (_i = 0, _len = open.length; _i < _len; _i++) {
        key = open[_i];
        key.updateAttribute('open', false);
        _results.push(key.trigger('close'));
      }
      return _results;
    };

    Key.prototype.toggleOpen = function() {
      var open, _ref;
      open = (_ref = !this.open) != null ? _ref : true;
      Key.close();
      if (open === false) {
        return;
      }
      this.updateAttribute('open', true);
      return this.trigger('open');
    };

    return Key;

  }).call(this, Spine.Model);

  module.exports = Key;

}).call(this);
