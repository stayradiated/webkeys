// Generated by CoffeeScript 1.4.0
(function() {
  var Q, Spine, Storage, UpdateAttribute, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine = require('spine');

  fs = require('fs');

  Q = require('q');

  UpdateAttribute = require('./updateAttr');

  Spine.Model.Local = {
    extended: function() {
      this.bind('create', this.saveLocal);
      this.bind('updateAttr', this.updateHandler);
      this.fetch(this.loadLocal);
      return this.extend(UpdateAttribute);
    },
    saveList: function(keys) {
      var files, json;
      files = [];
      keys.each(function(key) {
        return files.push(key.id);
      });
      json = JSON.stringify(files);
      return Storage.writeFile('keys/index', json);
    },
    saveLocal: function(model) {
      var filename, json, values;
      filename = 'keys/' + model.id + '.webkey';
      values = ['id', 'title', 'url', 'username', 'password', 'icon'];
      json = JSON.stringify(model.toJSON(), values, 4);
      Storage.writeFile(filename, json);
      return this.saveList(this);
    },
    updateHandler: function(model, attr, value, old) {
      if (attr === 'title' || attr === 'url' || attr === 'username' || attr === 'password' || attr === 'icon') {
        return this.saveLocal(model);
      }
    },
    loadLocal: function() {
      var _this = this;
      Storage.loadKeys().then(function(results) {
        return _this.refresh(results || [], {
          clear: true
        });
      });
    }
  };

  Storage = (function(_super) {

    __extends(Storage, _super);

    function Storage() {
      Storage.__super__.constructor.apply(this, arguments);
    }

    Storage.readDir = function(path) {
      var deferred;
      deferred = Q.defer();
      fs.readdir(path, function(err, files) {
        if (err) {
          return deferred.reject(err);
        }
        return deferred.resolve(files);
      });
      return deferred.promise;
    };

    Storage.getIcons = function() {
      var deferred, icons;
      deferred = Q.defer();
      icons = [];
      Storage.readDir('./icons').then(function(files) {
        var extension, filename, _i, _len;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          filename = files[_i];
          extension = filename.slice(-4);
          if (extension !== '.png') {
            continue;
          }
          icons.push(filename.slice(0, -4));
        }
        return deferred.resolve(icons);
      });
      return deferred.promise;
    };

    Storage.writeFile = function(filename, data) {
      return fs.writeFile(filename, data, 'utf8');
    };

    Storage.loadKeys = function() {
      var deferred, keys;
      deferred = Q.defer();
      keys = [];
      fs.readFile('keys/index', function(err, data) {
        var addKey, id, index, _i, _len, _results;
        if (err) {
          return deferred.reject(err);
        }
        index = JSON.parse(data);
        addKey = function(err, data) {
          var key;
          if (err) {
            return;
          }
          key = JSON.parse(data);
          keys.push(key);
          if (keys.length === index.length) {
            return deferred.resolve(keys);
          }
        };
        _results = [];
        for (_i = 0, _len = index.length; _i < _len; _i++) {
          id = index[_i];
          _results.push(fs.readFile("keys/" + id + ".webkey", addKey));
        }
        return _results;
      });
      return deferred.promise;
    };

    return Storage;

  }).call(this, Spine.Controller);

  module.exports = Storage;

}).call(this);
