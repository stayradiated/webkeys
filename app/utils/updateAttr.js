// Generated by CoffeeScript 1.4.0

/*
Trigger updateAttr on model with the attribute that was modified and the new and
old versions of that attribute

Based on Spine-Attribute-Events by Mitch Lloyd
https://github.com/mitchlloyd/Spine-Attribute-Events
*/


(function() {
  var AttributeTracking, ClassMethods, _;

  _ = require('lodash');

  ClassMethods = {
    setAttributesSnapshot: function(model) {
      return this._attributesSnapshots[model.cid] = model.toJSON();
    },
    getAttributesSnapshot: function(model) {
      return this._attributesSnapshots[model.cid];
    }
  };

  AttributeTracking = {
    extended: function() {
      var _this = this;
      this._attributesSnapshots = {};
      this.bind('refresh create', function(models) {
        var model, _i, _len, _results;
        models || (models = _this.all());
        if (models.length != null) {
          _results = [];
          for (_i = 0, _len = models.length; _i < _len; _i++) {
            model = models[_i];
            _results.push(_this.setAttributesSnapshot(model));
          }
          return _results;
        } else {
          return _this.setAttributesSnapshot(models);
        }
      });
      this.bind('update', function(model) {
        var key, old, value, _ref;
        _ref = model.attributes();
        for (key in _ref) {
          value = _ref[key];
          old = _this.getAttributesSnapshot(model)[key];
          if (!_.isEqual(old, value)) {
            model.trigger("updateAttr", key, value, old);
          }
        }
        return _this.setAttributesSnapshot(model);
      });
      return this.extend(ClassMethods);
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = AttributeTracking;
  }

}).call(this);
